// vector and list algorithms with objects in containers
// Mikhail Nesterenko
// 9/10/2018

#include <fstream>
#include <iostream>
#include <vector>
#include <list>
#include <string>
#include <cstdlib>

using std::ifstream;
using std::string; using std::getline;
using std::list; using std::vector;
using std::cout; using std::endl;
using std::move;


class Student{
public:
                    Student(string firstName, string lastName): 
                    firstName_(firstName), lastName_(lastName) {}
 
   // move constructor, not really needed, generated automatically
                    Student(Student && org) noexcept:
                    firstName_(move(org.firstName_)),
                    lastName_(move(org.lastName_))
                    {}
  
   // force generation of default copy constructor
                    Student(const Student & org) = default;

    // needed for unique() and for remove()
    friend bool     operator== (Student left, Student right){
                        return left.lastName_ == right.lastName_ &&
                            left.firstName_ == right.firstName_;
                            }    

   // needed for sort()
   friend bool      operator< (Student left, Student right){
                        return left.lastName_ < right.lastName_ ||
                            (left.lastName_ == right.lastName_ && 
                            left.firstName_ < right.firstName_);
                    }
    void            print() const {
                        cout << firstName_ + ' ' + lastName_ << " ";
                        for (auto& className : classes_) {
                            cout << className << " ";
                        }
                        cout << endl;
    };
    string          getName() const {return firstName_ + " " + lastName_;}
    void            addClasses(string course) {classes_.push_back(course);}
private:
   string firstName_;
   string lastName_;
   list<string> classes_;
};




// reading a list from a fileName
void readRoster(list<Student>& roster, string fileName);  
// printing a list out
void printRoster(const list<Student>& roster); 

int main(int argc, char* argv[]){

   if (argc <= 1){ cout << "usage: " << argv[0] 
      << " list of courses, dropouts last" << endl; exit(1);}

   // vector of courses of students

   list<Student> courseStudents; 
   for(int i = 1; i < argc - 1; ++i){
      readRoster(courseStudents, argv[i]);  
      cout << "Read: " << argv[i] << endl;  
   }
   printRoster(courseStudents);

}

void readRoster(list<Student>& roster, string fileName){
   ifstream course(fileName);
   string first, last;
   string className = fileName.substr(0, 3);                            //gets rid of .txt


   while(course >> first >> last) {                                     // reads first line until whitespace (firstname) and the second line until whitespace (lastName)
    bool found = false;                                                 // defualt value of found set to false in order to add new students to the roster
    string studentName = first + " " + last;                            // creates a string from the two values read in from the file

    for (auto& student : roster) {                                      // iterate through each Student in the roster

        if (student.getName() == studentName) {                         // if the student in the list is equal to the name we just read from the file (student already exists in roster)
            found = true;                                               // then set the found value to be true
            student.addClasses(className);                              // and use the addClasses member function to add the className to that Student's classes_ list
            break;                                                      // no need to keep iterating through
        }
    }
        if (!found) {                                                   // if found is false (there are no people with that name in the list)
            Student new_kid(first, last);                               // create a new instance of the Student class and contruct it with the names read in 
            new_kid.addClasses(className);                              // add the class we are currently reading from to the students list
            roster.push_back(new_kid);                                  // push this student to the roster list
        }
    }
   course.close();
}

// printing a list out
void printRoster(const list<Student>& roster){
   for(const auto& student : roster)
      student.print();
}